@page "/Cart"
@using System.Diagnostics;
@inject CoffeeConfig CoffeeConfig
@inject OrderItem OrderItem
@inject AddIn AddIn
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<MudPaper Class="pa-4">
    <MudForm>
        <MudTextField @bind-Value="_phone"  Immediate="true" Label="Phone" />
    </MudForm>
</MudPaper>

<MudTable Items="@Elements"
          Dense=true
          Hover=true
          Bordered=true
          Striped=true>

    <ToolBarContent>
        <MudText Typo="Typo.h6">Cart</MudText>


    </ToolBarContent>


    <HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Type</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Item Name">@context.Name</MudTd>
        <MudTd DataLabel="Item Type">@context.ItemType</MudTd>
        <MudTd DataLabel="Price">Rs.@context.Price</MudTd>

        <MudTd DataLabel="Quantity">

            <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="subtract" OnClick="@(() => QuantityUpdate(context.OrderContentID, "sub"))"></MudIconButton>

            <span>
                @context.Quantity
            </span>

            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="@(() => QuantityUpdate(context.OrderContentID, "add"))"></MudIconButton>


        </MudTd>

        <MudTd DataLabel="TotalPrice">Rs.@context.TotalPrice</MudTd>
        <MudTd DataLabel="Action">
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => handleDeleteCartItem(context.OrderContentID))"></MudIconButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSpacer />
<MudText Typo="Typo.subtitle1">Total Price: <b>Rs.@_totalAmount</b></MudText>

<div class="mt-5">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=" clearAllCartData">Clear</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=" CheckDiscount">Check Discount</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=" OnCheckout">Place Order</MudButton>
    
</div>



@code {


    string _phone;

    [CascadingParameter]



    private GlobalState _globalState { set; get; }

    double discountPercentage = 0.10;

    private double _totalAmount { set; get; } = 0;

    public List<Order> Order { get; set; }


    private IEnumerable<OrderContent> Elements = new List<OrderContent>();

    private Coffee _coffee { set; get; }
    //calculate the total amount of the cart

    private double calculateTotalPrice()
    {
        double totalAmount = 0;
        //calculate the total amount from the list OrderList data.
        foreach (var x in Elements)
        {
            totalAmount += x.TotalPrice;
        }
        return totalAmount;
    }




    //remove the existing data
    private void clearAllCartData()
    {
        _globalState.OrderContent.Clear();
        _totalAmount = calculateTotalPrice();
    }

    private void handleDeleteCartItem(Guid orderItemID)
    {
        OrderItem.DeleteItemInList(_globalState.OrderContent, orderItemID);
        _totalAmount = calculateTotalPrice();
    }
    //Code to update the quantity of the item using add or subtract
    private void QuantityUpdate(Guid orderItemID, string action)
    {
        OrderItem.QuantityOfItem(_globalState.OrderContent, orderItemID, action);
        _totalAmount = calculateTotalPrice();
    }

    protected override void OnInitialized()
    {
        Elements = _globalState.OrderContent;

        _totalAmount = calculateTotalPrice();
    }

    // private void OnCheckout()
    // {
    //     if (!string.IsNullOrWhiteSpace(_phone))
    //     {
    //         // Call a method to save the order details to a JSON file
    //         OrderItem.SaveOrderToJson(_phone, _totalAmount,);
    //         string url = "/Cart?successMessage=Order placed successfully!";
    //         NavigationManager.NavigateTo(url);
    //     }

    // }


    private void OnCheckout()
    {
        if (string.IsNullOrWhiteSpace(_phone))
        {
            // Show an alert if the phone number is not filled
            JSRuntime.InvokeVoidAsync("alert", "Add Phone Number");

        }
        if (!string.IsNullOrWhiteSpace(_phone))
        {
            List<OrderContent> orderContentsList = Elements.ToList();

            OrderItem.SaveOrderToCustomerJson(_phone, orderContentsList);
            OrderItem.SavenewOrder(orderContentsList,_phone);

            NavigationManager.NavigateTo("/ViewOrder");
        }

    }

    private void CheckDiscount()
    {
        if (string.IsNullOrWhiteSpace(_phone))
        {
            // Show an alert if the phone number is not filled
            JSRuntime.InvokeVoidAsync("alert", "Add Phone Number");

        }
        if (!string.IsNullOrWhiteSpace(_phone))
        {
            // Get the last order counter for the specified customer phone
            int lastOrderCounter = OrderItem.GetLastOrderCounter(_phone);

            // Check if the counter is 10
            if (lastOrderCounter == 10)
            {
                double discountAmount = _totalAmount * discountPercentage;
                _totalAmount -= discountAmount;
                JSRuntime.InvokeVoidAsync("alert", "10% discount is made");
            }
            else
            {
                JSRuntime.InvokeVoidAsync("alert", "Customer is not elegible for discount");
            }

            
        }
    }

}