@page "/cart"
@using System.Diagnostics;
@inject CoffeeConfig CoffeeConfig
@inject OrderItem OrderItem
@inject AddIn AddIn


<MudTable Items="@Elements"
          Dense=true
          Hover=true
          Bordered=true
          Striped=true>

    <ToolBarContent>
        <MudText Typo="Typo.h6">Cart</MudText>


    </ToolBarContent>


    <HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Type</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name ">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.ItemType</MudTd>
        <MudTd DataLabel="Price">Rs.@context.Price</MudTd>

        <MudTd DataLabel="Quantity">

            <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="subtract" OnClick="@(() => QuantityUpdate(context.OrderContentID, "sub"))"></MudIconButton>

            <span>
                @context.Quantity
            </span>

            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="@(() => QuantityUpdate(context.OrderContentID, "add"))"></MudIconButton>


        </MudTd>

        <MudTd DataLabel="Price">Rs.@context.TotalPrice</MudTd>
        <MudTd DataLabel="Action">
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => handleDeleteCartItem(context.OrderContentID))"></MudIconButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSpacer />
<MudText Typo="Typo.subtitle1">Total Price: <b>Rs.@_totalAmount</b></MudText>

<div class="mt-5">
    <MudButton Variant="Variant.Filled" OnClick="clearAllCartData">Clear Cart</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Checkout</MudButton>
</div>

@code {
    [CascadingParameter]
    private GlobalState _globalState { set; get; }


    private double _totalAmount { set; get; } = 0;


    private IEnumerable<OrderContent> Elements = new List<OrderContent>();

    private Coffee _coffee { set; get; }
    //calculate the total amount of the cart
    private double calculateTotalAmount()
    {
        double totalAmount = 0;
        //calculate the total amount from the list OrderList data.
        foreach (var item in Elements)
        {
            totalAmount += item.TotalPrice;
        }
        return totalAmount;
    }

    //remove the existing data
    private void clearAllCartData()
    {
        _globalState.OrderContent.Clear();
        _totalAmount = calculateTotalAmount();
    }

    private void handleDeleteCartItem(Guid orderItemID)
    {
        OrderItem.DeleteItemInOrderContentList(_globalState.OrderContent, orderItemID);
        _totalAmount = calculateTotalAmount();
    }

    //Code to update the quantity of the item using add or subtract
    private void QuantityUpdate(Guid orderItemID, string action)
    {
        OrderItem.QuantityOfItemList(_globalState.OrderContent, orderItemID, action);
        _totalAmount = calculateTotalAmount();
    }

    protected override void OnInitialized()
    {
        Elements = _globalState.OrderContent;
        
        _totalAmount = calculateTotalAmount();
    }


}
